name: Build hgrweb image and Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - '*.*.*'
      - 'v*.*.*'

jobs:
  checkout-build-dockerize-and-redeploy:
    runs-on: self-hosted
    env:
      DOCKER_IMAGEBASE: hustlegotreal/hgrweb
      DOCKER_FILEPATH: ./production.dockerfile
      DOCKER_CONTEXT_X: ./
      DOCKERHUB_USER: hustlegotreal
      K8S_DEPLOYMENT: hgrweb
      K8S_NAMESPACE: live
      K8S_CONTAINERNAME: hgrweb
      #IGNOREME: true
    secrets:
      DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}
      GPACKAGES_TOKEN: ${{secrets.GPACKAGES_TOKEN}}
      KUBECONFIG: ${{secrets.KUBECONFIG}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          #submodules: false
          #lfs: true
          clean: true

      - name: Check initial folder
        run: |
          echo "Checked out code"
          ls -la
          echo $PWD
      - name: Extract Git Branch information
        id: branch_name
        run: |
          MBRANCH=${GITHUB_REF#refs/*/}
          GITSHA=${GITHUB_SHA::8}
          BRANCH=${MBRANCH#feature/}
          echo "$BRANCH";
          if ["$BRANCH" == "develop"]; then BRANCH="$(BRANCH)$(date +%s)"; fi
          echo ::set-output name=SOURCE_NAME::$BRANCH
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
          echo ::set-output name=DOCKERIMAGEANDTAG::${{ env.DOCKER_IMAGEBASE }}:$BRANCH
          echo ::set-output name=K8S_CONTAINERNAME::${{ env.K8S_CONTAINERNAME }}
          echo SOURCE_NAME $SOURCE_NAME $BRANCH ~ALSO~ SOURCE_TAG $SOURCE_TAG ~ALSO~ SHA $GITSHA
      - uses: docker/login-action@v1
        if: ${{ !env.ACT }}
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #- name: Set up Docker Buildx (already installed in runners)
      #  uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.branch_name.outputs.DOCKERIMAGEANDTAG }}
          #  --tag my-image-name:$(date +%s)
          context: ${{ env.DOCKER_CONTEXT_X}}
          file: ${{ env.DOCKER_FILEPATH }}

      - name: Generate patch command for kubectl
        if: ${{ !env.ACT }}
        id: patch_cmd
        run: |
          CMD='{"spec": {"template": {"spec": {"containers": [{"name":"${{ steps.branch_name.outputs.K8S_CONTAINERNAME }}","image": "${{ steps.branch_name.outputs.DOCKERIMAGEANDTAG }}"}] }}}}'
          echo Going to execute : $CMD
          echo ::set-output name=K8SPATCH::$CMD
      - name: Update version in Cluster
        if: ${{ !env.ACT }}
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG }}
          command: "--insecure-skip-tls-verify patch deploy/${{ env.K8S_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }} --patch '${{ steps.patch_cmd.outputs.K8SPATCH }}'"

      - name: Redeploy
        if: ${{ !env.ACT }}
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG }}
          command: "--insecure-skip-tls-verify rollout restart deploy/${{ env.K8S_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }}"

      - name: Verify Deployment
        if: ${{ !env.ACT }}
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG }}
          command: "--insecure-skip-tls-verify rollout status deployment ${{ env.K8S_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }}"
